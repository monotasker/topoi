(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'represent'"
p3
sS'layer'
p4
S'/home/ian/web2py/applications/topoi/controllers/plugin_listandedit.py'
p5
sS'code'
p6
S'# coding: utf8\nif 0:\n    import current, URL, A\n    from sqlhtml import SQLFORM\n    response, request, db = current.response, current.request, current.db\n\ndef list():\n    """\n    API: Takes two required arguments. The first is the name of the table being listed, and the second is the id of the project.\n    Takes one required variable in the URL request: a dictionary with at least one item with the index \'fields\'. The value of request.vars[fields] provides the fields to be used to represent each record in the list.\n    """\n    response.files.append(URL(\'static\', \'plugin_listandedit/plugin_listandedit.css\'))\n    response.files.append(URL(\'static\', \'plugin_listandedit/plugin_listandedit.js\'))\n\n    tablename = request.args[0]\n    restrictor = request.args[1]\n    rname_row = db(db.projects.id == restrictor).select(db.projects.projectname).first()\n    rname = rname_row.projectname\n    fieldnames = request.vars[\'fields\']\n\n    rowlist = \'\'\n    if not tablename in db.tables():\n        response.flash = \'Sorry, you are trying to list entries from a table that does not exist in the database.\'\n    else:\n        tb = db[tablename]\n        #TODO: Get tables and fields programmatically\n        rowlist = db((tb.author == db.authors.id) & (tb.work == db.works.id) & (tb.project == restrictor)).select()\n\n    listset = []\n    for r in rowlist:\n        #FIXME: I need to get these values programmatically from vars[\'fields\']\n        listformat = r.represent\n\n        i = A(listformat, _href=URL(\'plugin_listandedit\', \'edit.load\', args=[tablename, r.notes.id]), _class=\'plugin_listandedit_list\', cid=\'viewpane\')\n        listset.append(i)\n\n    adder = A(\'Add new\', _href=URL(\'plugin_listandedit\', \'edit.load\', args=[tablename]), _class=\'plugin_listandedit_list\', cid=\'viewpane\')\n\n    return dict(listset = listset, adder = adder, rname = rname)\n\ndef edit():\n    tablename = request.args[0]\n    if len(request.args) > 1:\n        rowid = request.args[1]\n        formname = \'%s/%s\' % (tablename, rowid)\n\n        form = SQLFORM(db[tablename], rowid, separator=\'\', showid=False, input=\'save changes\')\n        if form.process(formname=formname).accepted:\n            response.flash = \'The changes were recorded successfully.\'\n        elif form.errors:\n            response.flash = \'Sorry, there was an error processing \' \\\n                             \'the form. The changes have not been recorded.\'\n        else:\n            #TODO: Why is this line being run when a record is first selected?\n            pass\n\n    elif len(request.args) == 1:\n        formname = \'%s/create\' % (tablename)\n\n        form = SQLFORM(db[tablename], separator=\'\', showid=False, input=\'save changes\')\n        if form.process(formname=formname).accepted:\n            response.flash = \'New record successfully created.\'\n        elif form.errors:\n            response.flash = \'Sorry, there was an error processing \'\\\n                             \'the form. The new record has not been created.\'\n        else:\n            response.flash = \'Sorry, something went wrong. The new record has not been created.\'\n\n    else:\n        response.flash = \'Sorry, you need to specify a type of record before I can list the records.\'\n\n    return dict(form = form)\nresponse._vars=response._caller(list)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/ian/web2py/gluon/restricted.py", line 204, in restricted\n    exec ccode in environment\n  File "/home/ian/web2py/applications/topoi/controllers/plugin_listandedit.py", line 73, in <module>\n  File "/home/ian/web2py/gluon/globals.py", line 172, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ian/web2py/applications/topoi/controllers/plugin_listandedit.py", line 32, in list\n    listformat = r.represent\n  File "/home/ian/web2py/gluon/dal.py", line 4440, in __getattr__\n    return self[key]\n  File "/home/ian/web2py/gluon/dal.py", line 4431, in __getitem__\n    return dict.__getitem__(self, key)\nKeyError: \'represent\'\n'
p11
s.